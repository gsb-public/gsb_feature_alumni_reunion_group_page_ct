<?php
/**
 * @file
 * Code for the GSB Feature Alumni Reunion Group Page Content Type feature.
 */

include_once 'gsb_feature_alumni_reunion_group_page_ct.features.inc';

/**
 * Implements hook_node_insert().
 */
function gsb_feature_alumni_reunion_group_page_ct_entity_insert($node) {
  _gsb_feature_alumni_reunion_group_page_ct_node_save($node);
}

/**
 * Implements hook_node_update().
 */
function gsb_feature_alumni_reunion_group_page_ct_entity_update($node) {
  _gsb_feature_alumni_reunion_group_page_ct_node_save($node);
}

/**
 * Helper for hook_node_insert() and hook_node_update().
 */
function _gsb_feature_alumni_reunion_group_page_ct_node_save($node) {
  // Include the pathauto library.
  module_load_include('inc', 'pathauto');

  // if this is not an alumni group, then...
  if ($node->type != 'alumni_reunion_group_page') {
    // ... this is not the node we are looking for
    return;
  }

  // if there is no session id, then...
  if (empty($node->field_reunion_session_ref[$node->language])) {
    // ... there is nothing for us to do
    return;
  }

  // Get the path alias of the group node.
  $group_path = drupal_get_path_alias('node/' . $node->nid);

  // Get the session title and clean it for urls.
  $session_nid = $node->field_reunion_session_ref[$node->language][0]['target_id'];
  $session_path = path_load('node/' . $session_nid);
  $session_path_array = explode('/', $session_path['alias']);
  $path = array_pop($session_path_array);
  $path_part1 = $group_path . '/' . $path;

  // DB Query to get list of nids for all agenda items with a matching session id.
  $results = db_query(
    "Select entity_id from {field_data_field_alumni_session_ref} where field_alumni_session_ref_target_id = " . $session_nid . " AND bundle = 'alumni_reunion_agenda_item'"
  );
  foreach ($results as $record) {
    $agenda_item_node = node_load($record->entity_id);
    $alias_path = $path_part1 . '/' . pathauto_cleanstring($agenda_item_node->title);
    gsb_feature_alumni_reunion_agenda_item_ct_create_alias($agenda_item_node, $alias_path);
  }

  // save a redirect to the group page
  _gsb_feature_alumni_reunion_group_page_ct_add_redirect($path_part1, 'node/' . $node->nid);
}

function _gsb_feature_alumni_reunion_group_page_ct_add_redirect($source_url, $redirect_url) {
  $redirect = array();
  $redirect['source'] = $source_url;
  $redirect['redirect'] = $redirect_url;
  $redirect_object = new stdClass();
  redirect_object_prepare($redirect_object, $redirect);
  // Check if the redirect exists before saving.
  if (!redirect_load_by_source($source_url)) {
    redirect_save($redirect_object);
  }
  return $redirect_object;
 }
